---
import Layout from "@/components/layout.astro";
import Header from "@/components/header.astro";
import { SITE } from "@/config";
---

<Layout title={`Network | ${SITE.title}`}>
  <div class="relative overflow-hidden bg-[#F2F4F7]">
    <!-- Moroccan Pattern Background -->
    <div class="absolute inset-0 z-0">
      <div class="moroccan-pattern-1 absolute inset-0 opacity-10"></div>
      <div class="moroccan-pattern-2 absolute inset-0 opacity-5"></div>
    </div>

    <Header />
    <main class="main relative z-10 mx-auto py-8 md:py-16">
      <section class="mb-12 text-center">
        <h1 class="mb-4 text-4xl font-bold">Moroccans in AI Research</h1>
        <p class="mx-auto max-w-2xl text-lg text-gray-600 dark:text-gray-400">
          Discover and connect with Moroccan researchers in Artificial
          Intelligence.
        </p>
        <div class="mt-6">
          <button
            id="add-researcher-btn"
            class="rounded-lg bg-blue-600 px-6 py-3 font-medium text-white shadow-sm transition-colors hover:bg-blue-700"
          >
            <i class="fas fa-plus mr-2"></i>
            Add a Researcher
          </button>
        </div>
      </section>

      <!-- Separate Search Bar -->
      <div class="mb-6 rounded-lg bg-white p-4 shadow-sm">
        <div class="relative mx-auto max-w-md">
          <div class="absolute inset-y-0 left-0 flex items-center pl-3">
            <i class="fas fa-search text-gray-400"></i>
          </div>
          <input
            id="name-search"
            type="text"
            placeholder="Search by first name, last name, or full name..."
            class="w-full rounded-lg border border-gray-300 py-3 pl-10 pr-4 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
          />
        </div>
        <div id="search-status" class="mt-2 text-center text-sm text-gray-600">
        </div>
      </div>

      <!-- Search and Filter Section -->
      <div class="mb-8 rounded-lg bg-white p-6 shadow-sm">
        <div
          class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between"
        >
          <!-- Filter and Sort Controls -->
          <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
            <!-- Interest Filter -->
            <div class="flex items-center gap-2">
              <label
                for="interest-select"
                class="text-sm font-medium text-gray-700">Filter by:</label
              >
              <select
                id="interest-select"
                class="rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
              >
                <option value="all">All Interests</option>
              </select>
            </div>

            <!-- Sort Buttons -->
            <div class="flex items-center gap-2">
              <span class="text-sm font-medium text-gray-700">Sort by:</span>
              <div class="flex gap-1">
                <button
                  id="sort-name"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  A-Z
                </button>
                <button
                  id="sort-hindex"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  h-Index
                </button>
                <button
                  id="sort-citations"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  Citations
                </button>
                <button
                  id="sort-shuffle"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  <i class="fas fa-random"></i>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Results Count -->
        <div id="results-count" class="mt-4 text-sm text-gray-600"></div>
      </div>

      <div class="flex flex-col gap-6">
        <!-- Mobile Filter Toggle (hidden on larger screens) -->
        <button
          id="mobile-filter-toggle"
          class="flex items-center justify-center gap-2 rounded-lg bg-white p-3 shadow-sm md:hidden"
        >
          <i class="fas fa-filter"></i>
          <span>Filters & Sort</span>
        </button>
        <div
          id="researcher-container"
          class="grid flex-1 grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
        >
          <!-- Loading skeleton will be shown here initially -->
          <div
            id="loading-skeleton"
            class="col-span-full flex items-center justify-center py-12"
          >
            <div class="text-center">
              <div
                class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent"
              >
              </div>
              <p class="mt-2 text-gray-600">Loading researchers...</p>
            </div>
          </div>
        </div>

        <!-- No results message -->
        <div id="no-results" class="col-span-full hidden py-12 text-center">
          <div class="mx-auto max-w-sm">
            <i class="fas fa-search mb-4 text-4xl text-gray-400"></i>
            <h3 class="mb-2 text-lg font-medium text-gray-900">
              No researchers found
            </h3>
            <p class="text-gray-600">
              Try adjusting your search terms or filters to find what you're
              looking for.
            </p>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal for Adding Researcher -->
  <div
    id="add-researcher-modal"
    class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
  >
    <div
      class="max-h-[90vh] w-full max-w-md overflow-y-auto rounded-lg bg-white"
    >
      <div class="p-6">
        <div class="mb-4 flex items-center justify-between">
          <h2 class="text-2xl font-bold text-gray-900">Join Moroccans in AI</h2>
          <button
            id="close-modal"
            class="text-gray-400 transition-colors hover:text-gray-600"
          >
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>

        <p class="mb-3 font-medium text-gray-600">
          Submit a profile to be featured in the MAIR network.
        </p>
        <p class="mb-6 text-sm text-gray-500">
          To be considered for inclusion, the only criteria is that the
          individual must have an h-index of 5 or higher, as recorded on their
          Google Scholar profile.
        </p>

        <form
          id="researcher-form"
          action="https://formspree.io/f/xyzebenp"
          method="POST"
          class="space-y-4"
        >
          <div>
            <label
              for="name"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Full Name</label
            >
            <input
              type="text"
              name="name"
              id="name"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="email"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Email Address</label
            >
            <input
              type="email"
              name="email"
              id="email"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="affiliation"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Affiliation</label
            >
            <input
              type="text"
              name="affiliation"
              id="affiliation"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="interests"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Research Interests</label
            >
            <input
              type="text"
              name="interests"
              placeholder="e.g. NLP, Robotics"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="profile"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Profile Link (Google Scholar, LinkedIn, etc.)</label
            >
            <input
              type="url"
              name="profile"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div class="flex gap-3 pt-4">
            <button
              type="button"
              id="cancel-btn"
              class="flex-1 rounded-lg border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="flex-1 rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
            >
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Success Message Modal -->
  <div
    id="success-modal"
    class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
  >
    <div class="w-full max-w-sm rounded-lg bg-white">
      <div class="p-6 text-center">
        <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-green-100"
        >
          <i class="fas fa-check text-2xl text-green-600"></i>
        </div>
        <h3 class="mb-2 text-xl font-semibold text-gray-900">
          Submission Successful!
        </h3>
        <p class="mb-6 text-gray-600">
          Thank you for your submission. We'll review your profile and add it to
          our network soon.
        </p>
        <button
          id="close-success-modal"
          class="w-full rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</Layout>
<script is:inline>
  console.log("🚀 Network page - separate search approach");

  document.addEventListener("DOMContentLoaded", function () {
    console.log("🚀 DOM loaded");

    // Get DOM elements - SEPARATE SEARCH
    const nameSearchInput = document.getElementById("name-search");
    const searchStatus = document.getElementById("search-status");
    const interestSelect = document.getElementById("interest-select");
    const resultsCount = document.getElementById("results-count");
    const container = document.getElementById("researcher-container");
    const noResults = document.getElementById("no-results");
    const loadingSkeleton = document.getElementById("loading-skeleton");

    // Sort buttons
    const sortBtns = {
      name: document.getElementById("sort-name"),
      hindex: document.getElementById("sort-hindex"),
      citations: document.getElementById("sort-citations"),
      shuffle: document.getElementById("sort-shuffle"),
    };

    // Modal elements
    const addResearcherBtn = document.getElementById("add-researcher-btn");
    const modal = document.getElementById("add-researcher-modal");
    const closeModalBtn = document.getElementById("close-modal");
    const cancelBtn = document.getElementById("cancel-btn");
    const researcherForm = document.getElementById("researcher-form");
    const successModal = document.getElementById("success-modal");
    const closeSuccessModalBtn = document.getElementById("close-success-modal");

    console.log("🔍 Elements found:", {
      nameSearchInput: !!nameSearchInput,
      searchStatus: !!searchStatus,
      interestSelect: !!interestSelect,
      container: !!container,
    });

    if (!nameSearchInput) {
      console.error("❌ Name search input not found!");
      return;
    }

    // Data variables
    let allResearchers = [];
    let filteredResearchers = [];
    let activeSort = "name";

    // Show status
    function updateStatus(message, isError = false) {
      if (searchStatus) {
        searchStatus.textContent = message;
        searchStatus.className = `mt-2 text-center text-sm ${isError ? "text-red-600" : "text-gray-600"}`;
      }
      console.log(isError ? "❌" : "✅", message);
    }

    // Show loading
    if (loadingSkeleton) {
      loadingSkeleton.style.display = "flex";
    }
    updateStatus("Loading researchers...");

    // Load data - EXACTLY like working test-search pattern
    fetch("/researchers_en.json")
      .then(response => {
        console.log("📡 Response:", response.status);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        return response.json();
      })
      .then(data => {
        console.log("📊 Raw data:", data.length);
        console.log("📊 Sample:", data[0]);

        // Enhanced data processing with better name handling
        allResearchers = data.map(r => {
          // Use existing firstName/lastName if available, otherwise parse from name
          const name = r.name || "Unknown";
          const nameParts = name.split(/\s+/).filter(part => part.length > 0);
          
          return {
            ...r,
            name: name,
            firstName: r.firstName || (nameParts.length > 0 ? nameParts[0] : ""),
            lastName: r.lastName || (nameParts.length > 1 ? nameParts.slice(1).join(" ") : ""),
            position: r.position || "Researcher",
            affiliation: r.affiliation || "",
            interests: Array.isArray(r.interests) ? r.interests : [],
            hindex: parseInt(r.hindex) || 0,
            citedby: parseInt(r.citedby) || 0,
          };
        });

        console.log("✅ Processed:", allResearchers.length);
        updateStatus(
          `Ready! ${allResearchers.length} researchers loaded. Try searching by name.`
        );

        // Setup everything AFTER data is loaded - KEY FIX
        setupSearch(allResearchers);
        setupInterestFilter();
        setupSorting();
        setupModals();

        // Initial render
        filteredResearchers = [...allResearchers];
        applySorting();
        renderResearchers();
        updateActiveSortButton(activeSort);

        if (loadingSkeleton) {
          loadingSkeleton.style.display = "none";
        }
      })
      .catch(error => {
        console.error("❌ Error:", error);
        updateStatus(`Error: ${error.message}`, true);
        if (loadingSkeleton) {
          loadingSkeleton.style.display = "none";
        }
      });

    // Setup search - EXACTLY like working test-search pattern
    function setupSearch(researchers) {
      console.log(
        "🔧 Setting up search with",
        researchers.length,
        "researchers"
      );

      nameSearchInput.addEventListener("input", function (e) {
        const query = e.target.value.trim().toLowerCase();
        console.log("🔍 Search query:", query);

        performNameSearch(query);
      });

      console.log("✅ Search event bound");
    }

    // Perform comprehensive name search
    function performNameSearch(query) {
      console.log("🎯 Performing name search:", query);

      if (!query.trim()) {
        // If no search query, apply interest filter only
        applyInterestFilter();
        return;
      }

      const queryLower = query.toLowerCase();

      // Enhanced name search with comprehensive matching
      const nameMatches = allResearchers.filter(r => {
        const name = (r.name || "").toLowerCase();
        const firstName = (r.firstName || "").toLowerCase();
        const lastName = (r.lastName || "").toLowerCase();
        
        // Split the full name into individual words for more flexible matching
        const nameWords = name.split(/\s+/).filter(word => word.length > 0);
        const queryWords = queryLower.split(/\s+/).filter(word => word.length > 0);

        // Check various matching scenarios
        const matches = 
          // Direct substring matching in any name field
          name.includes(queryLower) ||
          firstName.includes(queryLower) ||
          lastName.includes(queryLower) ||
          
          // Check if any query word matches any name word (partial matching)
          queryWords.some(queryWord => 
            nameWords.some(nameWord => nameWord.includes(queryWord))
          ) ||
          
          // Check if query matches start of first name or last name
          firstName.startsWith(queryLower) ||
          lastName.startsWith(queryLower) ||
          
          // Check if any name word starts with the query
          nameWords.some(nameWord => nameWord.startsWith(queryLower));

        if (matches) {
          console.log("✅ Name match:", r.name, "| Query:", query);
        }

        return matches;
      });

      console.log("🎯 Name matches found:", nameMatches.length);

      // Then apply interest filter to name results
      const selectedInterest = interestSelect ? interestSelect.value : "all";

      if (selectedInterest === "all") {
        filteredResearchers = nameMatches;
      } else {
        filteredResearchers = nameMatches.filter(
          r => r.interests && r.interests.includes(selectedInterest)
        );
      }

      console.log("🎯 Final filtered:", filteredResearchers.length);
      
      // Enhanced status message with search details
      if (filteredResearchers.length === 0) {
        updateStatus(`No researchers found matching "${query}". Try searching by first name, last name, or full name.`);
      } else {
        updateStatus(`Found ${filteredResearchers.length} researcher(s) matching "${query}"`);
      }

      applySorting();
      renderResearchers();
    }

    // Apply interest filter only
    function applyInterestFilter() {
      const selectedInterest = interestSelect ? interestSelect.value : "all";

      if (selectedInterest === "all") {
        filteredResearchers = [...allResearchers];
      } else {
        filteredResearchers = allResearchers.filter(
          r => r.interests && r.interests.includes(selectedInterest)
        );
      }

      updateStatus(`Showing ${filteredResearchers.length} researcher(s)`);
      applySorting();
      renderResearchers();
    }

    function setupInterestFilter() {
      if (!interestSelect) return;

      const allInterests = allResearchers
        .flatMap(r => r.interests || [])
        .filter(Boolean);
      const uniqueInterests = [...new Set(allInterests)].sort();

      interestSelect.innerHTML = "";

      // Add "All Interests" option
      const allOption = document.createElement("option");
      allOption.value = "all";
      allOption.textContent = "All Interests";
      interestSelect.appendChild(allOption);

      // Add interest options
      uniqueInterests.forEach(interest => {
        const option = document.createElement("option");
        option.value = interest;
        option.textContent = interest;
        interestSelect.appendChild(option);
      });

      // Interest filter event
      interestSelect.addEventListener("change", function (e) {
        console.log("🎯 Interest changed:", e.target.value);

        // Re-apply search with new interest filter
        const query = nameSearchInput.value.trim();
        if (query) {
          performNameSearch(query);
        } else {
          applyInterestFilter();
        }
      });
    }

    function setupSorting() {
      if (sortBtns.name) {
        sortBtns.name.addEventListener("click", () => sortResearchers("name"));
      }
      if (sortBtns.hindex) {
        sortBtns.hindex.addEventListener("click", () =>
          sortResearchers("hindex")
        );
      }
      if (sortBtns.citations) {
        sortBtns.citations.addEventListener("click", () =>
          sortResearchers("citations")
        );
      }
      if (sortBtns.shuffle) {
        sortBtns.shuffle.addEventListener("click", () => shuffleResearchers());
      }
    }

    function sortResearchers(sortType) {
      activeSort = sortType;
      updateActiveSortButton(sortType);
      applySorting();
      renderResearchers();
    }

    function applySorting() {
      switch (activeSort) {
        case "name":
          filteredResearchers.sort((a, b) => {
            const last = a.lastName.localeCompare(b.lastName);
            if (last !== 0) return last;
            return a.firstName.localeCompare(b.firstName);
          });
          break;
        case "hindex":
          filteredResearchers.sort((a, b) => (b.hindex || 0) - (a.hindex || 0));
          break;
        case "citations":
          filteredResearchers.sort(
            (a, b) => (b.citedby || 0) - (a.citedby || 0)
          );
          break;
      }
    }

    function shuffleResearchers() {
      activeSort = "shuffle";
      updateActiveSortButton("shuffle");

      for (let i = filteredResearchers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [filteredResearchers[i], filteredResearchers[j]] = [
          filteredResearchers[j],
          filteredResearchers[i],
        ];
      }

      renderResearchers();
    }

    function updateActiveSortButton(sortType) {
      Object.values(sortBtns).forEach(btn => {
        if (btn) {
          btn.classList.remove("bg-blue-500", "text-white");
          btn.classList.add("bg-gray-100", "text-gray-700");
        }
      });

      const activeBtn = sortBtns[sortType];
      if (activeBtn) {
        activeBtn.classList.remove("bg-gray-100", "text-gray-700");
        activeBtn.classList.add("bg-blue-500", "text-white");
      }
    }

    function renderResearchers() {
      if (!container) return;

      container.innerHTML = "";
      updateResultsCount();

      if (filteredResearchers.length === 0) {
        showNoResults();
        return;
      }

      hideNoResults();

      filteredResearchers.forEach(researcher => {
        const card = createResearcherCard(researcher);
        container.appendChild(card);
      });

      console.log("✅ Rendered", filteredResearchers.length, "cards");
    }

    // ...existing card rendering functions...
    function createResearcherCard(researcher) {
      const card = document.createElement("div");
      card.className =
        "group cursor-pointer rounded-lg border border-gray-200 bg-white p-6 shadow-sm transition-all duration-200 hover:shadow-lg hover:border-blue-300";

      const photoPath = researcher.photo
        ? researcher.photo.replace("./profiles/", "/profiles/")
        : "/profiles/default-avatar.png";
      const metrics = formatMetrics(researcher);
      const interests = formatInterests(researcher.interests || []);
      const socialLinks = formatSocialLinks(researcher);

      card.innerHTML = `
        <div class="flex flex-col items-center text-center">
          <img class="h-20 w-20 rounded-full object-cover ring-4 ring-gray-100 transition-all duration-200" 
               src="${photoPath}" 
               alt="${researcher.name}"
               onerror="this.src='/profiles/default-avatar.png'" />
          <h3 class="mt-4 text-lg font-semibold text-gray-900 transition-colors">${researcher.name}</h3>
          <p class="mt-1 text-sm font-medium text-blue-600">${researcher.position || ""}</p>
          <p class="mt-1 text-sm text-gray-600">${researcher.affiliation || ""}</p>
          ${metrics}
          ${interests}
          ${socialLinks}
        </div>
      `;

      return card;
    }

    function formatMetrics(researcher) {
      if (!researcher.hindex && !researcher.citedby) return "";

      const hindex = researcher.hindex
        ? `<span class="flex items-center gap-1"><i class="fas fa-chart-line"></i> h-index: ${formatNumber(researcher.hindex)}</span>`
        : "";

      const citations = researcher.citedby
        ? `<span class="flex items-center gap-1"><i class="fas fa-quote-right"></i> ${formatNumber(researcher.citedby)} citations</span>`
        : "";

      return `<div class="mt-3 flex gap-4 text-xs text-gray-500">${hindex}${citations}</div>`;
    }

    function formatNumber(num) {
      if (!num) return "0";
      return num >= 1000 ? (num / 1000).toFixed(1) + "k" : num.toString();
    }

    function formatInterests(interests) {
      if (!interests || !interests.length) return "";

      const displayedInterests = interests.slice(0, 3);
      const remainingCount = interests.length - 3;

      const tags = displayedInterests
        .map(
          tag =>
            `<span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-700 transition-colors">${tag}</span>`
        )
        .join("");

      const moreTag =
        remainingCount > 0
          ? `<span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-500">+${remainingCount}</span>`
          : "";

      return `<div class="mt-4 flex flex-wrap justify-center gap-1">${tags}${moreTag}</div>`;
    }

    function formatSocialLinks(researcher) {
      const links = [];

      if (researcher.scholar) {
        links.push(
          `<a href="${researcher.scholar}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Google Scholar"><i class='fas fa-graduation-cap text-sm'></i></a>`
        );
      }

      if (researcher.linkedin) {
        links.push(
          `<a href="${researcher.linkedin}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="LinkedIn"><i class='fab fa-linkedin text-sm'></i></a>`
        );
      }

      if (researcher.website) {
        links.push(
          `<a href="${researcher.website}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Website"><i class='fas fa-globe text-sm'></i></a>`
        );
      }

      if (researcher.twitter) {
        links.push(
          `<a href="${researcher.twitter}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Twitter"><i class='fab fa-twitter text-sm'></i></a>`
        );
      }

      return links.length
        ? `<div class="mt-4 flex gap-3">${links.join("")}</div>`
        : "";
    }

    function updateResultsCount() {
      if (!resultsCount) return;

      const filtered = filteredResearchers.length;
      const total = allResearchers.length;

      if (filtered === total) {
        resultsCount.textContent = `Showing all ${total} researchers`;
      } else {
        resultsCount.textContent = `Showing ${filtered} of ${total} researchers`;
      }
    }

    function showNoResults() {
      if (noResults) noResults.style.display = "block";
    }

    function hideNoResults() {
      if (noResults) noResults.style.display = "none";
    }

    // Modal functions
    function setupModals() {
      if (addResearcherBtn) {
        addResearcherBtn.addEventListener("click", openModal);
      }
      if (closeModalBtn) {
        closeModalBtn.addEventListener("click", closeModal);
      }
      if (cancelBtn) {
        cancelBtn.addEventListener("click", closeModal);
      }
      if (closeSuccessModalBtn) {
        closeSuccessModalBtn.addEventListener("click", closeSuccessModal);
      }
      if (researcherForm) {
        researcherForm.addEventListener("submit", handleFormSubmit);
      }

      // Close modals when clicking outside
      if (modal) {
        modal.addEventListener("click", e => {
          if (e.target === modal) closeModal();
        });
      }
      if (successModal) {
        successModal.addEventListener("click", e => {
          if (e.target === successModal) closeSuccessModal();
        });
      }
    }

    function openModal() {
      if (modal) {
        modal.classList.remove("hidden");
        document.body.style.overflow = "hidden";
      }
    }

    function closeModal() {
      if (modal) {
        modal.classList.add("hidden");
        document.body.style.overflow = "auto";
        if (researcherForm) researcherForm.reset();
      }
    }

    function closeSuccessModal() {
      if (successModal) {
        successModal.classList.add("hidden");
        document.body.style.overflow = "auto";
      }
    }

    async function handleFormSubmit(e) {
      e.preventDefault();
      if (!researcherForm) return;

      const submitBtn = researcherForm.querySelector('button[type="submit"]');
      const originalText = submitBtn ? submitBtn.textContent : "";

      try {
        if (submitBtn) {
          submitBtn.textContent = "Submitting...";
          submitBtn.disabled = true;
        }

        const formData = new FormData(researcherForm);
        const response = await fetch(researcherForm.action, {
          method: "POST",
          body: formData,
          headers: { Accept: "application/json" },
        });

        if (response.ok) {
          closeModal();
          if (successModal) {
            successModal.classList.remove("hidden");
            document.body.style.overflow = "hidden";
          }
        } else {
          throw new Error("Form submission failed");
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        alert("There was an error submitting your form. Please try again.");
      } finally {
        if (submitBtn) {
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        }
      }
    }

    console.log("✅ Separate search setup complete");
  });
</script>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
/>
