---
import Layout from "@/components/layout.astro";
import Header from "@/components/header.astro";
import { SITE } from "@/config";
---

<Layout title={`Network | ${SITE.title}`}>
  <div class="relative overflow-hidden bg-[#F2F4F7]">
    <!-- Moroccan Pattern Background -->
    <div class="absolute inset-0 z-0">
      <div class="moroccan-pattern-1 absolute inset-0 opacity-10"></div>
      <div class="moroccan-pattern-2 absolute inset-0 opacity-5"></div>
    </div>

    <Header />
    <main class="main relative z-10 mx-auto py-8 md:py-16">
      <section class="mb-12 text-center">
        <h1 class="mb-4 text-4xl font-bold">Moroccans in AI Research</h1>
        <p class="mx-auto max-w-2xl text-lg text-gray-600 dark:text-gray-400">
          Discover and connect with Moroccan researchers in Artificial
          Intelligence.
        </p>
        <div class="mt-6">
          <button
            id="add-researcher-btn"
            class="rounded-lg bg-blue-600 px-6 py-3 font-medium text-white shadow-sm transition-colors hover:bg-blue-700"
          >
            <i class="fas fa-plus mr-2"></i>
            Add a Researcher
          </button>
        </div>
      </section>
      <!-- Search and Filter Section -->
      <div class="mb-8 rounded-lg bg-white p-6 shadow-sm">
        <div
          class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between"
        >
          <!-- Search Input -->
          <div class="relative flex-1 lg:max-w-md">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3">
              <i class="fas fa-search text-gray-400"></i>
            </div>
            <input
              id="search"
              type="text"
              placeholder="Search by name, affiliation, or position..."
              class="w-full rounded-lg border border-gray-300 py-3 pl-10 pr-4 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <!-- Filter and Sort Controls -->
          <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
            <!-- Interest Filter -->
            <div class="flex items-center gap-2">
              <label
                for="interest-select"
                class="text-sm font-medium text-gray-700">Filter by:</label
              >
              <select
                id="interest-select"
                class="rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
              >
                <option value="all">All Interests</option>
              </select>
            </div>

            <!-- Sort Buttons -->
            <div class="flex items-center gap-2">
              <span class="text-sm font-medium text-gray-700">Sort by:</span>
              <div class="flex gap-1">
                <button
                  id="sort-name"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  A-Z
                </button>
                <button
                  id="sort-hindex"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  h-Index
                </button>
                <button
                  id="sort-citations"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  Citations
                </button>
                <button
                  id="sort-shuffle"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  <i class="fas fa-random"></i>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Results Count -->
        <div id="results-count" class="mt-4 text-sm text-gray-600"></div>
      </div>

      <div class="flex flex-col gap-6">
        <!-- Mobile Filter Toggle (hidden on larger screens) -->
        <button
          id="mobile-filter-toggle"
          class="flex items-center justify-center gap-2 rounded-lg bg-white p-3 shadow-sm md:hidden"
        >
          <i class="fas fa-filter"></i>
          <span>Filters & Sort</span>
        </button>
        <div
          id="researcher-container"
          class="grid flex-1 grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
        >
          <!-- Loading skeleton will be shown here initially -->
          <div
            id="loading-skeleton"
            class="col-span-full flex items-center justify-center py-12"
          >
            <div class="text-center">
              <div
                class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent"
              >
              </div>
              <p class="mt-2 text-gray-600">Loading researchers...</p>
            </div>
          </div>
        </div>

        <!-- No results message -->
        <div id="no-results" class="col-span-full hidden py-12 text-center">
          <div class="mx-auto max-w-sm">
            <i class="fas fa-search mb-4 text-4xl text-gray-400"></i>
            <h3 class="mb-2 text-lg font-medium text-gray-900">
              No researchers found
            </h3>
            <p class="text-gray-600">
              Try adjusting your search terms or filters to find what you're
              looking for.
            </p>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal for Adding Researcher -->
  <div
    id="add-researcher-modal"
    class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
  >
    <div
      class="max-h-[90vh] w-full max-w-md overflow-y-auto rounded-lg bg-white"
    >
      <div class="p-6">
        <div class="mb-4 flex items-center justify-between">
          <h2 class="text-2xl font-bold text-gray-900">Join Moroccans in AI</h2>
          <button
            id="close-modal"
            class="text-gray-400 transition-colors hover:text-gray-600"
          >
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>

        <p class="mb-3 font-medium text-gray-600">
          Submit a profile to be featured in the MAIR network.
        </p>
        <p class="mb-6 text-sm text-gray-500">
          To be considered for inclusion, the only criteria is that the
          individual must have an h-index of 5 or higher, as recorded on their
          Google Scholar profile.
        </p>

        <form
          id="researcher-form"
          action="https://formspree.io/f/xyzebenp"
          method="POST"
          class="space-y-4"
        >
          <div>
            <label
              for="name"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Full Name</label
            >
            <input
              type="text"
              name="name"
              id="name"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="email"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Email Address</label
            >
            <input
              type="email"
              name="email"
              id="email"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="affiliation"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Affiliation</label
            >
            <input
              type="text"
              name="affiliation"
              id="affiliation"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="interests"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Research Interests</label
            >
            <input
              type="text"
              name="interests"
              placeholder="e.g. NLP, Robotics"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="profile"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Profile Link (Google Scholar, LinkedIn, etc.)</label
            >
            <input
              type="url"
              name="profile"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div class="flex gap-3 pt-4">
            <button
              type="button"
              id="cancel-btn"
              class="flex-1 rounded-lg border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="flex-1 rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
            >
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Success Message Modal -->
  <div
    id="success-modal"
    class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
  >
    <div class="w-full max-w-sm rounded-lg bg-white">
      <div class="p-6 text-center">
        <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-green-100"
        >
          <i class="fas fa-check text-2xl text-green-600"></i>
        </div>
        <h3 class="mb-2 text-xl font-semibold text-gray-900">
          Submission Successful!
        </h3>
        <p class="mb-6 text-gray-600">
          Thank you for your submission. We'll review your profile and add it to
          our network soon.
        </p>
        <button
          id="close-success-modal"
          class="w-full rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</Layout>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    class ResearcherNetwork {
      constructor() {
        this.allResearchers = [];
        this.currentSort = null;
        this.searchTimeout = null;
        this.isLoading = false;

        // DOM elements
        this.elements = {
          container: document.getElementById("researcher-container"),
          searchInput: document.getElementById("search"),
          interestSelect: document.getElementById("interest-select"),
          resultsCount: document.getElementById("results-count"),
          noResults: document.getElementById("no-results"),
          loadingSkeleton: document.getElementById("loading-skeleton"),
          // Sort buttons
          sortName: document.getElementById("sort-name"),
          sortHindex: document.getElementById("sort-hindex"),
          sortCitations: document.getElementById("sort-citations"),
          sortShuffle: document.getElementById("sort-shuffle"),
          // Modal elements
          addResearcherBtn: document.getElementById("add-researcher-btn"),
          modal: document.getElementById("add-researcher-modal"),
          successModal: document.getElementById("success-modal"),
          closeModal: document.getElementById("close-modal"),
          cancelBtn: document.getElementById("cancel-btn"),
          closeSuccessModal: document.getElementById("close-success-modal"),
          researcherForm: document.getElementById("researcher-form"),
        };

        this.init();
      }

      async init() {
        try {
          this.bindEvents();
          this.showLoading();
          await this.loadResearchers();
          this.initializeFilters();
          this.renderResearchers();
        } catch (error) {
          this.handleError("Failed to initialize network", error);
        }
      }

      bindEvents() {
        // Search input with debouncing
        this.elements.searchInput?.addEventListener("input", e => {
          this.handleSearch(e.target.value);
        });

        // Interest filter
        this.elements.interestSelect?.addEventListener("change", e => {
          this.handleFilterChange(e.target.value);
        });

        // Sort buttons - remove inline onclick handlers
        this.elements.sortName?.addEventListener("click", () =>
          this.sortByName()
        );
        this.elements.sortHindex?.addEventListener("click", () =>
          this.sortByHIndex()
        );
        this.elements.sortCitations?.addEventListener("click", () =>
          this.sortByCitations()
        );
        this.elements.sortShuffle?.addEventListener("click", () =>
          this.shuffleList()
        );

        // Modal events
        this.bindModalEvents();
      }

      bindModalEvents() {
        // Open modal
        this.elements.addResearcherBtn?.addEventListener("click", () => {
          this.openModal();
        });

        // Close modal events
        this.elements.closeModal?.addEventListener("click", () =>
          this.closeModal()
        );
        this.elements.cancelBtn?.addEventListener("click", () =>
          this.closeModal()
        );
        this.elements.closeSuccessModal?.addEventListener("click", () =>
          this.closeSuccessModal()
        );

        // Close modal when clicking outside
        this.elements.modal?.addEventListener("click", e => {
          if (e.target === this.elements.modal) {
            this.closeModal();
          }
        });

        this.elements.successModal?.addEventListener("click", e => {
          if (e.target === this.elements.successModal) {
            this.closeSuccessModal();
          }
        });

        // Handle form submission
        this.elements.researcherForm?.addEventListener("submit", e => {
          this.handleFormSubmission(e);
        });
      }

      handleSearch(query) {
        clearTimeout(this.searchTimeout);
        const q = (query || "").toLowerCase();
        this.searchTimeout = setTimeout(() => {
          const filter = this.elements.interestSelect?.value || "all";
          this.renderResearchers(filter, q);
        }, 300);
      }

      handleFilterChange(filter) {
        const query = this.elements.searchInput?.value.toLowerCase() || "";
        this.renderResearchers(filter, query);
      }

      async loadResearchers() {
        try {
          const url = new URL(
            "/researchers_en.json",
            import.meta.env.BASE_URL || "/"
          ).pathname;
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          this.allResearchers = data.filter(this.isValidResearcher);
          console.log(`Loaded ${this.allResearchers.length} valid researchers`);
        } catch (error) {
          throw new Error(`Failed to load researchers: ${error.message}`);
        }
      }

      isValidResearcher(researcher) {
        return (
          researcher &&
          researcher.name &&
          researcher.photo &&
          researcher.position &&
          researcher.affiliation &&
          Array.isArray(researcher.interests)
        );
      }

      initializeFilters() {
        if (!this.elements.interestSelect) return;

        const allInterests = this.allResearchers
          .flatMap(r => r.interests || [])
          .filter(Boolean);

        const uniqueInterests = [...new Set(allInterests)].sort();

        // Clear existing options except "All Interests"
        const firstOption = this.elements.interestSelect.querySelector(
          'option[value="all"]'
        );
        this.elements.interestSelect.innerHTML = "";
        if (firstOption) {
          this.elements.interestSelect.appendChild(firstOption);
        }

        uniqueInterests.forEach(interest => {
          const option = document.createElement("option");
          option.value = interest;
          option.textContent = interest;
          this.elements.interestSelect.appendChild(option);
        });
      }

      renderResearchers(filter = "all", query = "") {
        if (!this.elements.container) return;

        this.hideLoading();
        this.elements.container.innerHTML = "";

        const filtered = this.filterResearchers(filter, query);
        const sorted = this.sortResearchers(filtered);

        this.updateResultsCount(sorted.length, this.allResearchers.length);

        if (sorted.length === 0) {
          this.showNoResults();
          return;
        }

        this.hideNoResults();
        sorted.forEach(researcher => {
          const card = this.createResearcherCard(researcher);
          this.elements.container.appendChild(card);
        });
      }

      filterResearchers(filter, query) {
        return this.allResearchers.filter(researcher => {
          const matchesFilter =
            filter === "all" ||
            (researcher.interests &&
              researcher.interests
                .map(i => i.toLowerCase())
                .includes(filter.toLowerCase()));

          if (!query) return matchesFilter;

          const searchText = [
            researcher.name,
            researcher.affiliation,
            researcher.position,
            ...(researcher.interests || []),
          ]
            .join(" ")
            .toLowerCase();

          return matchesFilter && searchText.includes(query);
        });
      }

      sortResearchers(researchers) {
        const sortedResearchers = [...researchers];

        switch (this.currentSort) {
          case "name":
            return sortedResearchers.sort((a, b) =>
              (a.name || "").localeCompare(b.name || "")
            );
          case "hindex":
            return sortedResearchers.sort(
              (a, b) => (b.hindex || 0) - (a.hindex || 0)
            );
          case "citations":
            return sortedResearchers.sort(
              (a, b) => (b.citedby || 0) - (a.citedby || 0)
            );
          default:
            return sortedResearchers;
        }
      }

      createResearcherCard(researcher) {
        const card = document.createElement("div");
        card.className =
          "group cursor-pointer rounded-lg border border-gray-200 bg-white p-6 shadow-sm transition-all duration-200 hover:shadow-lg hover:border-blue-300";

        const photoPath = this.getPhotoPath(researcher.photo);
        const metrics = this.formatMetrics(researcher);
        const interests = this.formatInterests(researcher.interests || []);
        const socialLinks = this.formatSocialLinks(researcher);

        card.innerHTML = `
          <div class="flex flex-col items-center text-center">
            <img class="h-20 w-20 rounded-full object-cover ring-4 ring-gray-100 transition-all duration-200" 
                 src="${photoPath}" 
                 alt="${researcher.name}"
                 onerror="this.src='/profiles/default-avatar.png'" />
            <h3 class="mt-4 text-lg font-semibold text-gray-900 transition-colors">${researcher.name}</h3>
            <p class="mt-1 text-sm font-medium text-blue-600">${researcher.position}</p>
            <p class="mt-1 text-sm text-gray-600">${researcher.affiliation}</p>
            ${metrics}
            ${interests}
            ${socialLinks}
          </div>
        `;

        return card;
      }

      getPhotoPath(photo) {
        if (!photo) return "/profiles/default-avatar.png";
        return photo.replace(
          /^\.\/(src\/assets|public)\/profiles\//,
          "/profiles/"
        );
      }

      formatMetrics(researcher) {
        const hasMetrics = researcher.hindex || researcher.citedby;
        if (!hasMetrics) return "";

        const hindex = researcher.hindex
          ? `<span class="flex items-center gap-1"><i class="fas fa-chart-line"></i> h-index: ${this.formatNumber(researcher.hindex)}</span>`
          : "";

        const citations = researcher.citedby
          ? `<span class="flex items-center gap-1"><i class="fas fa-quote-right"></i> ${this.formatNumber(researcher.citedby)} citations</span>`
          : "";

        return `
          <div class="mt-3 flex gap-4 text-xs text-gray-500">
            ${hindex}
            ${citations}
          </div>
        `;
      }

      formatNumber(num) {
        if (num >= 1000) {
          return (num / 1000).toFixed(1) + "k";
        }
        return num.toString();
      }

      formatInterests(interests) {
        if (!interests.length) return "";

        const displayedInterests = interests.slice(0, 3);
        const remainingCount = interests.length - 3;

        const interestTags = displayedInterests
          .map(
            tag =>
              `<span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-700 transition-colors">${tag}</span>`
          )
          .join("");

        const remainingTag =
          remainingCount > 0
            ? `<span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-500">+${remainingCount}</span>`
            : "";

        return `
          <div class="mt-4 flex flex-wrap justify-center gap-1">
            ${interestTags}
            ${remainingTag}
          </div>
        `;
      }

      formatSocialLinks(researcher) {
        const links = [];

        if (researcher.scholar) {
          links.push(
            `<a href="${researcher.scholar}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Google Scholar"><i class='fas fa-graduation-cap text-sm'></i></a>`
          );
        }

        if (researcher.linkedin) {
          links.push(
            `<a href="${researcher.linkedin}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="LinkedIn"><i class='fab fa-linkedin text-sm'></i></a>`
          );
        }

        if (researcher.website) {
          links.push(
            `<a href="${researcher.website}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Website"><i class='fas fa-globe text-sm'></i></a>`
          );
        }

        if (researcher.twitter) {
          links.push(
            `<a href="${researcher.twitter}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Twitter"><i class='fab fa-twitter text-sm'></i></a>`
          );
        }

        return links.length
          ? `<div class="mt-4 flex gap-3">${links.join("")}</div>`
          : "";
      }

      // Sort methods
      sortByName() {
        this.currentSort = "name";
        this.updateActiveSort(this.elements.sortName);
        this.applyCurrentFilters();
      }

      sortByHIndex() {
        this.currentSort = "hindex";
        this.updateActiveSort(this.elements.sortHindex);
        this.applyCurrentFilters();
      }

      sortByCitations() {
        this.currentSort = "citations";
        this.updateActiveSort(this.elements.sortCitations);
        this.applyCurrentFilters();
      }

      shuffleList() {
        this.currentSort = null;
        this.updateActiveSort(this.elements.sortShuffle);
        this.allResearchers = this.allResearchers.sort(
          () => Math.random() - 0.5
        );
        this.applyCurrentFilters();
      }

      applyCurrentFilters() {
        const filter = this.elements.interestSelect?.value || "all";
        const query = this.elements.searchInput?.value.toLowerCase() || "";
        this.renderResearchers(filter, query);
      }

      updateActiveSort(activeButton) {
        // Remove active state from all sort buttons
        document.querySelectorAll(".sort-btn").forEach(btn => {
          btn.classList.remove("bg-blue-500", "text-white");
          btn.classList.add("bg-gray-100", "text-gray-700");
        });

        // Add active state to clicked button
        if (activeButton) {
          activeButton.classList.remove("bg-gray-100", "text-gray-700");
          activeButton.classList.add("bg-blue-500", "text-white");
        }
      }

      updateResultsCount(count, total) {
        if (!this.elements.resultsCount) return;

        if (count === total) {
          this.elements.resultsCount.textContent = `Showing all ${total} researchers`;
        } else {
          this.elements.resultsCount.textContent = `Showing ${count} of ${total} researchers`;
        }
      }

      showLoading() {
        this.isLoading = true;
        if (this.elements.container) {
          this.elements.container.innerHTML = `
            <div id="loading-skeleton" class="col-span-full flex items-center justify-center py-12">
              <div class="text-center">
                <div class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent"></div>
                <p class="mt-2 text-gray-600">Loading researchers...</p>
              </div>
            </div>
          `;
        }
      }

      hideLoading() {
        this.isLoading = false;
        const loadingSkeleton = document.getElementById("loading-skeleton");
        if (loadingSkeleton) {
          loadingSkeleton.remove();
        }
      }

      showNoResults() {
        if (this.elements.noResults) {
          this.elements.noResults.style.display = "block";
        }
      }

      hideNoResults() {
        if (this.elements.noResults) {
          this.elements.noResults.style.display = "none";
        }
      }

      // Modal methods
      openModal() {
        if (this.elements.modal) {
          this.elements.modal.classList.remove("hidden");
          document.body.style.overflow = "hidden";
        }
      }

      closeModal() {
        if (this.elements.modal) {
          this.elements.modal.classList.add("hidden");
          document.body.style.overflow = "auto";
          this.elements.researcherForm?.reset();
        }
      }

      closeSuccessModal() {
        if (this.elements.successModal) {
          this.elements.successModal.classList.add("hidden");
          document.body.style.overflow = "auto";
        }
      }

      async handleFormSubmission(e) {
        e.preventDefault();

        const submitBtn = this.elements.researcherForm.querySelector(
          'button[type="submit"]'
        );
        const originalText = submitBtn.textContent;

        try {
          submitBtn.textContent = "Submitting...";
          submitBtn.disabled = true;

          const formData = new FormData(this.elements.researcherForm);
          const response = await fetch(this.elements.researcherForm.action, {
            method: "POST",
            body: formData,
            headers: {
              Accept: "application/json",
            },
          });

          if (response.ok) {
            this.closeModal();
            if (this.elements.successModal) {
              this.elements.successModal.classList.remove("hidden");
              document.body.style.overflow = "hidden";
            }
          } else {
            throw new Error("Form submission failed");
          }
        } catch (error) {
          console.error("Error submitting form:", error);
          alert("There was an error submitting your form. Please try again.");
        } finally {
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        }
      }

      handleError(message, error) {
        console.error(message, error);
        this.hideLoading();

        if (this.elements.container) {
          this.elements.container.innerHTML = `
            <div class="col-span-full py-12 text-center">
              <div class="mx-auto max-w-sm">
                <i class="fas fa-exclamation-triangle mb-4 text-4xl text-red-400"></i>
                <h3 class="mb-2 text-lg font-medium text-gray-900">Error loading researchers</h3>
                <p class="text-gray-600">Please try refreshing the page. Error: ${error.message}</p>
              </div>
            </div>
          `;
        }
      }
    }

    // Initialize the network
    new ResearcherNetwork();
  });
</script>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
/>
