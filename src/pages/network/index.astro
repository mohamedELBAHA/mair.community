---
import Layout from "@/components/layout.astro";
import Header from "@/components/header.astro";
import { SITE } from "@/config";
---

<Layout title={`Network | ${SITE.title}`}>
  <div class="relative overflow-hidden bg-[#F2F4F7]">
    <!-- Moroccan Pattern Background -->
    <div class="absolute inset-0 z-0">
      <div class="moroccan-pattern-1 absolute inset-0 opacity-10"></div>
      <div class="moroccan-pattern-2 absolute inset-0 opacity-5"></div>
    </div>

    <Header />
    <main class="main relative z-10 mx-auto py-8 md:py-16">
      <section class="mb-12 text-center">
        <h1 class="mb-4 text-4xl font-bold">Moroccans in AI Research</h1>
        <p class="mx-auto max-w-2xl text-lg text-gray-600 dark:text-gray-400">
          Discover and connect with Moroccan researchers in Artificial
          Intelligence.
        </p>
        <div class="mt-6">
          <button
            id="add-researcher-btn"
            class="rounded-lg bg-blue-600 px-6 py-3 font-medium text-white shadow-sm transition-colors hover:bg-blue-700"
          >
            <i class="fas fa-plus mr-2"></i>
            Add a Researcher
          </button>
        </div>
      </section>
      <!-- Search and Filter Section -->
      <div class="mb-8 rounded-lg bg-white p-6 shadow-sm">
        <div
          class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between"
        >
          <!-- Search Input -->
          <div class="relative flex-1 lg:max-w-md">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3">
              <i class="fas fa-search text-gray-400"></i>
            </div>
            <input
              id="search"
              type="text"
              placeholder="Search by name, affiliation, or position..."
              class="w-full rounded-lg border border-gray-300 py-3 pl-10 pr-4 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <!-- Filter and Sort Controls -->
          <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
            <!-- Interest Filter -->
            <div class="flex items-center gap-2">
              <label
                for="interest-select"
                class="text-sm font-medium text-gray-700">Filter by:</label
              >
              <select
                id="interest-select"
                class="rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
              >
                <option value="all">All Interests</option>
              </select>
            </div>

            <!-- Sort Buttons -->
            <div class="flex items-center gap-2">
              <span class="text-sm font-medium text-gray-700">Sort by:</span>
              <div class="flex gap-1">
                <button
                  id="sort-name"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  A-Z
                </button>
                <button
                  id="sort-hindex"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  h-Index
                </button>
                <button
                  id="sort-citations"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  Citations
                </button>
                <button
                  id="sort-shuffle"
                  class="sort-btn rounded-lg bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 transition-colors hover:bg-blue-100 hover:text-blue-700"
                >
                  <i class="fas fa-random"></i>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Results Count -->
        <div id="results-count" class="mt-4 text-sm text-gray-600"></div>
      </div>

      <div class="flex flex-col gap-6">
        <!-- Mobile Filter Toggle (hidden on larger screens) -->
        <button
          id="mobile-filter-toggle"
          class="flex items-center justify-center gap-2 rounded-lg bg-white p-3 shadow-sm md:hidden"
        >
          <i class="fas fa-filter"></i>
          <span>Filters & Sort</span>
        </button>
        <div
          id="researcher-container"
          class="grid flex-1 grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
        >
          <!-- Loading skeleton will be shown here initially -->
          <div
            id="loading-skeleton"
            class="col-span-full flex items-center justify-center py-12"
          >
            <div class="text-center">
              <div
                class="mx-auto h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent"
              >
              </div>
              <p class="mt-2 text-gray-600">Loading researchers...</p>
            </div>
          </div>
        </div>

        <!-- No results message -->
        <div id="no-results" class="col-span-full hidden py-12 text-center">
          <div class="mx-auto max-w-sm">
            <i class="fas fa-search mb-4 text-4xl text-gray-400"></i>
            <h3 class="mb-2 text-lg font-medium text-gray-900">
              No researchers found
            </h3>
            <p class="text-gray-600">
              Try adjusting your search terms or filters to find what you're
              looking for.
            </p>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal for Adding Researcher -->
  <div
    id="add-researcher-modal"
    class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
  >
    <div
      class="max-h-[90vh] w-full max-w-md overflow-y-auto rounded-lg bg-white"
    >
      <div class="p-6">
        <div class="mb-4 flex items-center justify-between">
          <h2 class="text-2xl font-bold text-gray-900">Join Moroccans in AI</h2>
          <button
            id="close-modal"
            class="text-gray-400 transition-colors hover:text-gray-600"
          >
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>

        <p class="mb-3 font-medium text-gray-600">
          Submit a profile to be featured in the MAIR network.
        </p>
        <p class="mb-6 text-sm text-gray-500">
          To be considered for inclusion, the only criteria is that the
          individual must have an h-index of 5 or higher, as recorded on their
          Google Scholar profile.
        </p>

        <form
          id="researcher-form"
          action="https://formspree.io/f/xyzebenp"
          method="POST"
          class="space-y-4"
        >
          <div>
            <label
              for="name"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Full Name</label
            >
            <input
              type="text"
              name="name"
              id="name"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="email"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Email Address</label
            >
            <input
              type="email"
              name="email"
              id="email"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="affiliation"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Affiliation</label
            >
            <input
              type="text"
              name="affiliation"
              id="affiliation"
              required
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="interests"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Research Interests</label
            >
            <input
              type="text"
              name="interests"
              placeholder="e.g. NLP, Robotics"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div>
            <label
              for="profile"
              class="mb-1 block text-sm font-medium text-gray-700"
              >Profile Link (Google Scholar, LinkedIn, etc.)</label
            >
            <input
              type="url"
              name="profile"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200"
            />
          </div>

          <div class="flex gap-3 pt-4">
            <button
              type="button"
              id="cancel-btn"
              class="flex-1 rounded-lg border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="flex-1 rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
            >
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Success Message Modal -->
  <div
    id="success-modal"
    class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
  >
    <div class="w-full max-w-sm rounded-lg bg-white">
      <div class="p-6 text-center">
        <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-green-100"
        >
          <i class="fas fa-check text-2xl text-green-600"></i>
        </div>
        <h3 class="mb-2 text-xl font-semibold text-gray-900">
          Submission Successful!
        </h3>
        <p class="mb-6 text-gray-600">
          Thank you for your submission. We'll review your profile and add it to
          our network soon.
        </p>
        <button
          id="close-success-modal"
          class="w-full rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</Layout>
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    class ResearcherNetwork {
      constructor() {
        // Core data
        this.researchers = [];
        this.filteredResearchers = [];
        this.activeSort = "name"; // Set default sort to name
        this.searchTimeout = null; // For debouncing search

        // DOM elements
        this.container = document.getElementById("researcher-container");
        this.searchInput = document.getElementById("search");
        this.interestSelect = document.getElementById("interest-select");
        this.resultsCount = document.getElementById("results-count");
        this.noResults = document.getElementById("no-results");
        this.loadingSkeleton = document.getElementById("loading-skeleton");

        console.log("Search input found:", !!this.searchInput);
        console.log("Interest select found:", !!this.interestSelect);

        // Sort buttons
        this.sortBtns = {
          name: document.getElementById("sort-name"),
          hindex: document.getElementById("sort-hindex"),
          citations: document.getElementById("sort-citations"),
          shuffle: document.getElementById("sort-shuffle"),
        };

        // Modal elements
        this.addResearcherBtn = document.getElementById("add-researcher-btn");
        this.modal = document.getElementById("add-researcher-modal");
        this.closeModalBtn = document.getElementById("close-modal");
        this.cancelBtn = document.getElementById("cancel-btn");
        this.researcherForm = document.getElementById("researcher-form");
        this.successModal = document.getElementById("success-modal");
        this.closeSuccessModalBtn = document.getElementById(
          "close-success-modal"
        );

        // Initialize
        this.init();
      }

      async init() {
        try {
          this.bindEvents();
          await this.fetchResearchers();

          // Set initial state after loading
          if (this.researchers.length > 0) {
            console.log("Setting initial state with all researchers");
            this.filteredResearchers = [...this.researchers]; // Start with all researchers
            this.setupInterestFilter();
            this.applySorting(); // Apply default sorting
            this.renderResearchers();
            this.updateActiveSortButton(this.activeSort); // Highlight default sort button
          } else {
            console.error("No researchers were loaded");
            this.showNoResults();
          }
        } catch (error) {
          console.error("Failed to initialize researcher network:", error);
          this.showErrorMessage(error);
        }
      }

      bindEvents() {
        // Search input
        if (this.searchInput) {
          this.searchInput.addEventListener(
            "input",
            this.handleSearch.bind(this)
          );
        } else {
          console.warn("Search input element not found");
        }

        // Interest filter
        if (this.interestSelect) {
          this.interestSelect.addEventListener(
            "change",
            this.handleFilterChange.bind(this)
          );
        } else {
          console.warn("Interest select element not found");
        }

        // Sort buttons
        if (this.sortBtns.name) {
          this.sortBtns.name.addEventListener("click", () =>
            this.sortResearchers("name")
          );
        }
        if (this.sortBtns.hindex) {
          this.sortBtns.hindex.addEventListener("click", () =>
            this.sortResearchers("hindex")
          );
        }
        if (this.sortBtns.citations) {
          this.sortBtns.citations.addEventListener("click", () =>
            this.sortResearchers("citations")
          );
        }
        if (this.sortBtns.shuffle) {
          this.sortBtns.shuffle.addEventListener("click", () =>
            this.shuffleResearchers()
          );
        }

        // Modal events
        if (this.addResearcherBtn) {
          this.addResearcherBtn.addEventListener("click", () =>
            this.openModal()
          );
        }
        if (this.closeModalBtn) {
          this.closeModalBtn.addEventListener("click", () => this.closeModal());
        }
        if (this.cancelBtn) {
          this.cancelBtn.addEventListener("click", () => this.closeModal());
        }
        if (this.closeSuccessModalBtn) {
          this.closeSuccessModalBtn.addEventListener("click", () =>
            this.closeSuccessModal()
          );
        }
        if (this.researcherForm) {
          this.researcherForm.addEventListener("submit", e =>
            this.handleFormSubmit(e)
          );
        }

        // Close modals when clicking outside
        if (this.modal) {
          this.modal.addEventListener("click", e => {
            if (e.target === this.modal) this.closeModal();
          });
        }
        if (this.successModal) {
          this.successModal.addEventListener("click", e => {
            if (e.target === this.successModal) this.closeSuccessModal();
          });
        }
      }

      async fetchResearchers() {
        this.showLoading();

        try {
          console.log("Fetching researchers data...");
          // Try with absolute URL if relative URL fails
          let response;

          try {
            response = await fetch("/researchers_en.json");
            if (!response.ok)
              throw new Error(`HTTP error! Status: ${response.status}`);
          } catch {
            console.warn(
              "Failed to fetch with relative path, trying absolute path"
            );
            // Try with a different path as fallback
            const absolutePath =
              window.location.origin + "/researchers_en.json";
            response = await fetch(absolutePath);
            if (!response.ok)
              throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const data = await response.json();
          console.log(`Loaded ${data.length} researchers from JSON`);

          if (!data || !Array.isArray(data) || data.length === 0) {
            throw new Error("Invalid or empty data received");
          }

          // Basic validation and normalization
          this.researchers = data
            .filter(r => r && r.name) // Basic validation
            .map(r => ({
              ...r,
              // Normalize fields to prevent errors
              name: r.name || "Unknown",
              position: r.position || "Researcher",
              affiliation: r.affiliation || "",
              interests: Array.isArray(r.interests) ? r.interests : [],
              hindex: parseInt(r.hindex) || 0,
              citedby: parseInt(r.citedby) || 0,
            }));

          console.log(`Processed ${this.researchers.length} valid researchers`);

          // If we have researchers but none are processed as valid, something is wrong with the data format
          if (data.length > 0 && this.researchers.length === 0) {
            console.error("Data format issue - sample data:", data[0]);
          }

          return this.researchers;
        } catch (error) {
          console.error("Error fetching researchers:", error);
          throw error;
        } finally {
          this.hideLoading();
        }
      }

      setupInterestFilter() {
        if (!this.interestSelect) return;

        console.log("Setting up interest filter");

        // Extract all interests
        const allInterests = this.researchers
          .flatMap(r => r.interests || [])
          .filter(Boolean);

        // Get unique interests and sort them
        const uniqueInterests = [...new Set(allInterests)].sort();

        console.log("Found interests:", uniqueInterests);

        // Keep the "All Interests" option
        const allOption = this.interestSelect.querySelector(
          'option[value="all"]'
        );
        this.interestSelect.innerHTML = "";

        if (allOption) {
          this.interestSelect.appendChild(allOption);
        } else {
          const option = document.createElement("option");
          option.value = "all";
          option.textContent = "All Interests";
          this.interestSelect.appendChild(option);
        }

        // Add interest options
        uniqueInterests.forEach(interest => {
          const option = document.createElement("option");
          option.value = interest;
          option.textContent = interest;
          this.interestSelect.appendChild(option);
        });

        console.log(
          `Added ${uniqueInterests.length} unique interests to filter`
        );
      }

      handleFilterChange(event) {
        const selectedInterest = event.target.value;
        console.log(`Filter changed to: "${selectedInterest}"`);
        this.applyFiltersAndSort();
      }

      handleSearch(event) {
        // Add debouncing to prevent excessive filtering
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(() => {
          console.log(`SEARCH DEBUG - Query: "${event.target.value}"`);
          // Print sample researcher for debugging
          if (this.researchers.length > 0) {
            console.log(
              "SEARCH DEBUG - Sample researcher:",
              this.researchers[0]
            );
          }
          this.applyFiltersAndSort();
        }, 250);
      }

      applyFiltersAndSort() {
        const query = this.searchInput?.value?.toLowerCase().trim() || "";
        const interest = this.interestSelect?.value || "all";

        console.log(
          `FILTER DEBUG - Applying filters - Query: "${query}", Interest: "${interest}"`
        );
        console.log(
          `FILTER DEBUG - Starting with ${this.researchers.length} researchers`
        );

        // Filter by interest and search query
        this.filteredResearchers = this.researchers.filter(researcher => {
          // Interest filter
          const matchesInterest =
            interest === "all" ||
            (researcher.interests &&
              Array.isArray(researcher.interests) &&
              researcher.interests.some(i => i === interest));

          // If no search query, just check interest
          if (!query) {
            return matchesInterest;
          }

          // Create searchable text from researcher data
          const nameMatch = (researcher.name || "")
            .toLowerCase()
            .includes(query);
          const positionMatch = (researcher.position || "")
            .toLowerCase()
            .includes(query);
          const affiliationMatch = (researcher.affiliation || "")
            .toLowerCase()
            .includes(query);

          // Check for matches in interests
          const interestsMatch =
            Array.isArray(researcher.interests) &&
            researcher.interests.some(i => i.toLowerCase().includes(query));

          const matches =
            nameMatch || positionMatch || affiliationMatch || interestsMatch;

          // Log matches for debugging
          if (matches && matchesInterest) {
            console.log(`FILTER DEBUG - Match: ${researcher.name}`);
          }

          return matchesInterest && matches;
        });

        console.log(
          `FILTER DEBUG - Filtered down to ${this.filteredResearchers.length} researchers`
        );

        // Apply sorting
        this.applySorting();

        // Render the filtered and sorted researchers
        this.renderResearchers();
      }

      sortResearchers(sortType) {
        console.log(`Sorting by: ${sortType}`);
        this.activeSort = sortType;
        this.updateActiveSortButton(sortType);
        this.applySorting();
        this.renderResearchers();
      }

      applySorting() {
        console.log(`Applying sort: ${this.activeSort}`);

        switch (this.activeSort) {
          case "name":
            // Sort by lastName, then firstName for tie-breaker
            this.filteredResearchers.sort((a, b) => {
              const last = a.lastName.localeCompare(b.lastName);
              if (last !== 0) return last;
              return a.firstName.localeCompare(b.firstName);
            });
            break;
          case "hindex":
            this.filteredResearchers.sort(
              (a, b) => (b.hindex || 0) - (a.hindex || 0)
            );
            break;
          case "citations":
            this.filteredResearchers.sort(
              (a, b) => (b.citedby || 0) - (a.citedby || 0)
            );
            break;
          // No need for shuffle case as it's handled separately
        }
      }

      shuffleResearchers() {
        console.log("Shuffling researchers");
        this.activeSort = "shuffle";
        this.updateActiveSortButton("shuffle");

        // Fisher-Yates shuffle algorithm
        for (let i = this.filteredResearchers.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [this.filteredResearchers[i], this.filteredResearchers[j]] = [
            this.filteredResearchers[j],
            this.filteredResearchers[i],
          ];
        }

        this.renderResearchers();
      }

      updateActiveSortButton(sortType) {
        // Remove active class from all buttons
        Object.values(this.sortBtns).forEach(btn => {
          if (btn) {
            btn.classList.remove("bg-blue-500", "text-white");
            btn.classList.add("bg-gray-100", "text-gray-700");
          }
        });

        // Add active class to selected button
        const activeBtn = this.sortBtns[sortType];
        if (activeBtn) {
          activeBtn.classList.remove("bg-gray-100", "text-gray-700");
          activeBtn.classList.add("bg-blue-500", "text-white");
        }
      }

      renderResearchers() {
        if (!this.container) {
          console.error("Researcher container not found");
          return;
        }

        // Clear container
        this.container.innerHTML = "";

        // Update results count
        this.updateResultsCount();

        // Show no results message if needed
        if (this.filteredResearchers.length === 0) {
          console.log("No researchers to display");
          this.showNoResults();
          return;
        }

        this.hideNoResults();

        // Create and append researcher cards
        this.filteredResearchers.forEach(researcher => {
          const card = this.createResearcherCard(researcher);
          this.container.appendChild(card);
        });

        console.log(
          `Rendered ${this.filteredResearchers.length} researcher cards`
        );
      }

      createResearcherCard(researcher) {
        const card = document.createElement("div");
        card.className =
          "group cursor-pointer rounded-lg border border-gray-200 bg-white p-6 shadow-sm transition-all duration-200 hover:shadow-lg hover:border-blue-300";

        const photoPath = this.getPhotoPath(researcher.photo);
        const metrics = this.formatMetrics(researcher);
        const interests = this.formatInterests(researcher.interests || []);
        const socialLinks = this.formatSocialLinks(researcher);

        card.innerHTML = `
          <div class="flex flex-col items-center text-center">
            <img class="h-20 w-20 rounded-full object-cover ring-4 ring-gray-100 transition-all duration-200" 
                 src="${photoPath}" 
                 alt="${researcher.name}"
                 onerror="this.src='/profiles/default-avatar.png'" />
            <h3 class="mt-4 text-lg font-semibold text-gray-900 transition-colors">${researcher.name}</h3>
            <p class="mt-1 text-sm font-medium text-blue-600">${researcher.position || ""}</p>
            <p class="mt-1 text-sm text-gray-600">${researcher.affiliation || ""}</p>
            ${metrics}
            ${interests}
            ${socialLinks}
          </div>
        `;

        return card;
      }

      getPhotoPath(photo) {
        if (!photo) return "/profiles/default-avatar.png";
        return photo.replace("./profiles/", "/profiles/");
      }

      formatMetrics(researcher) {
        if (!researcher.hindex && !researcher.citedby) return "";

        const hindex = researcher.hindex
          ? `<span class="flex items-center gap-1"><i class="fas fa-chart-line"></i> h-index: ${this.formatNumber(researcher.hindex)}</span>`
          : "";

        const citations = researcher.citedby
          ? `<span class="flex items-center gap-1"><i class="fas fa-quote-right"></i> ${this.formatNumber(researcher.citedby)} citations</span>`
          : "";

        return `
          <div class="mt-3 flex gap-4 text-xs text-gray-500">
            ${hindex}
            ${citations}
          </div>
        `;
      }

      formatNumber(num) {
        if (!num) return "0";
        return num >= 1000 ? (num / 1000).toFixed(1) + "k" : num.toString();
      }

      formatInterests(interests) {
        if (!interests || !interests.length) return "";

        const displayedInterests = interests.slice(0, 3);
        const remainingCount = interests.length - 3;

        const tags = displayedInterests
          .map(
            tag =>
              `<span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-700 transition-colors">${tag}</span>`
          )
          .join("");

        const moreTag =
          remainingCount > 0
            ? `<span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-500">+${remainingCount}</span>`
            : "";

        return `
          <div class="mt-4 flex flex-wrap justify-center gap-1">
            ${tags}
            ${moreTag}
          </div>
        `;
      }

      formatSocialLinks(researcher) {
        const links = [];

        if (researcher.scholar) {
          links.push(
            `<a href="${researcher.scholar}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Google Scholar"><i class='fas fa-graduation-cap text-sm'></i></a>`
          );
        }

        if (researcher.linkedin) {
          links.push(
            `<a href="${researcher.linkedin}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="LinkedIn"><i class='fab fa-linkedin text-sm'></i></a>`
          );
        }

        if (researcher.website) {
          links.push(
            `<a href="${researcher.website}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Website"><i class='fas fa-globe text-sm'></i></a>`
          );
        }

        if (researcher.twitter) {
          links.push(
            `<a href="${researcher.twitter}" target="_blank" class="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 transition-all" title="Twitter"><i class='fab fa-twitter text-sm'></i></a>`
          );
        }

        return links.length
          ? `<div class="mt-4 flex gap-3">${links.join("")}</div>`
          : "";
      }

      updateResultsCount() {
        if (!this.resultsCount) return;

        const filtered = this.filteredResearchers.length;
        const total = this.researchers.length;

        if (filtered === total) {
          this.resultsCount.textContent = `Showing all ${total} researchers`;
        } else {
          this.resultsCount.textContent = `Showing ${filtered} of ${total} researchers`;
        }
      }

      showNoResults() {
        if (this.noResults) {
          this.noResults.style.display = "block";
        }
      }

      hideNoResults() {
        if (this.noResults) {
          this.noResults.style.display = "none";
        }
      }

      showLoading() {
        if (this.loadingSkeleton) {
          this.loadingSkeleton.style.display = "flex";
        }
      }

      hideLoading() {
        if (this.loadingSkeleton) {
          this.loadingSkeleton.style.display = "none";
        }
      }

      showErrorMessage(error) {
        if (!this.container) return;

        this.container.innerHTML = `
          <div class="col-span-full py-12 text-center">
            <div class="mx-auto max-w-sm">
              <i class="fas fa-exclamation-triangle mb-4 text-4xl text-red-400"></i>
              <h3 class="mb-2 text-lg font-medium text-gray-900">Error loading researchers</h3>
              <p class="text-gray-600">Please try refreshing the page. Error: ${error.message}</p>
            </div>
          </div>
        `;
      }

      // Modal methods remain unchanged
      openModal() {
        if (this.modal) {
          this.modal.classList.remove("hidden");
          document.body.style.overflow = "hidden";
        }
      }

      closeModal() {
        if (this.modal) {
          this.modal.classList.add("hidden");
          document.body.style.overflow = "auto";
          if (this.researcherForm) this.researcherForm.reset();
        }
      }

      closeSuccessModal() {
        if (this.successModal) {
          this.successModal.classList.add("hidden");
          document.body.style.overflow = "auto";
        }
      }

      async handleFormSubmit(e) {
        e.preventDefault();

        if (!this.researcherForm) return;

        const submitBtn = this.researcherForm.querySelector(
          'button[type="submit"]'
        );
        const originalText = submitBtn ? submitBtn.textContent : "";

        try {
          if (submitBtn) {
            submitBtn.textContent = "Submitting...";
            submitBtn.disabled = true;
          }

          const formData = new FormData(this.researcherForm);

          const response = await fetch(this.researcherForm.action, {
            method: "POST",
            body: formData,
            headers: {
              Accept: "application/json",
            },
          });

          if (response.ok) {
            this.closeModal();
            if (this.successModal) {
              this.successModal.classList.remove("hidden");
              document.body.style.overflow = "hidden";
            }
          } else {
            throw new Error("Form submission failed");
          }
        } catch (error) {
          console.error("Error submitting form:", error);
          alert("There was an error submitting your form. Please try again.");
        } finally {
          if (submitBtn) {
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
          }
        }
      }
    }

    // Initialize
    new ResearcherNetwork();
  });
</script>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
/>
